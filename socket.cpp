/* ---------------------------------------------------------------------------------------------- 
 * 
 * プログラム概要 ： Newさくら麻雀(MJAIクライアント実装版)
 * バージョン     ： 0.1.2.0.155(Mjaiサーバモードの仮設定)
 * プログラム名   ： mjs.exe
 * ファイル名     ： socket.cpp
 * クラス名       ： MJSSocket
 * 処理概要       ： Socket処理クラス
 * Ver0.1.2作成日 ： 2023/11/19 21:38:17
 * 最終更新日     ： 2024/05/03 14:00:26
 * 
 * Copyright (c) 2010-2024 Techmilestone, All rights reserved.
 * 
 * ---------------------------------------------------------------------------------------------- */

#include "socket.h"
#include <windows.h>
#include "stdafx.h"

/* ---------------------------------------------------------------------------------------------- */
// 接続処理
/* ---------------------------------------------------------------------------------------------- */
int MJSSocket::SocketConect(){

	// DXライブラリ独自のsocket仕様を使用しない
	SetUseDXNetWorkProtocol( FALSE );
/*
	// IPアドレスを設定
	ip.d1 = 127 ;
	ip.d2 = 0   ;
	ip.d3 = 0   ;
	ip.d4 = 1   ;
*/
	// IPアドレスを設定
	ip.d1 = 192 ;
	ip.d2 = 168 ;
	ip.d3 = 27  ;
	ip.d4 = 88  ;     // 新サーバのIPアドレスに変更

	// 通信を確立
	net_handle = ConnectNetWork( ip, 11600 ) ;

	// ハンドルの正常性確認
	if( net_handle == -1 ){

		// 異常終了
		return -1;

	}else{

		// 正常終了
		return 0;

	}

}

/* ---------------------------------------------------------------------------------------------- */
// 終了処理
/* ---------------------------------------------------------------------------------------------- */
void MJSSocket::SocketDisconect(){

	// ネットワークハンドルの解放
	CloseNetWork(net_handle);

}

/* ---------------------------------------------------------------------------------------------- */
// 受信処理
/* ---------------------------------------------------------------------------------------------- */
void MJSSocket::ResponseMes(MJSGui *gui){

	// 取得していない受信データ量を得る
	data_size = GetNetWorkDataLength(net_handle);

	// 受信データ量が0より大きい場合
	if( data_size > 0 ){

		// バッファクリア
		memset(gui->res_mes, 0, sizeof(gui->res_mes));

		// 受信したデータをバッファに取得
		NetWorkRecv(net_handle, gui->res_mes, sizeof(gui->res_mes));

	}
}

/* ---------------------------------------------------------------------------------------------- */
// 送信処理
/* ---------------------------------------------------------------------------------------------- */
void MJSSocket::SendMes(MJSGui *gui){

	// メッセージ送信
	NetWorkSend(net_handle, gui->snd_mes, lstrlen(gui->snd_mes));

}

/* ---------------------------------------------------------------------------------------------- */
// ソース終了
/* ---------------------------------------------------------------------------------------------- */
