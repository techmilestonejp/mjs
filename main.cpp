/* ---------------------------------------------------------------------------------------------- 
 * 
 * プログラム概要 ： さくら麻雀(Ver0.1.2.1：開発版)
 * バージョン     ： 0.1.2.1.222(Mainクラスの導入)
 * プログラム名   ： mjs.exe
 * ファイル名     ： main.cpp
 * クラス名       ： MJSMain
 * 処理概要       ： メイン処理
 * Ver0.0.8.0作成 ： 2012/07/29 11:09:51
 * Ver0.1.0.0作成 ： 2022/05/03 18:50:06
 * Ver0.1.1.0作成 ： 2022/06/30 21:19:01
 * Ver0.1.2.0作成 ： 2022/08/31 22:19:54
 * Ver0.1.2.1作成 ： 2024/10/30 16:40:44
 * 最終更新日     ： 2024/11/02 09:38:41
 * 
 * Copyright (c) 2010-2024 TechMileStoraJP, All rights reserved.
 * 
 * ---------------------------------------------------------------------------------------------- */

#include "main.h"

/* ---------------------------------------------------------------------------------------------- */
// 開始処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainInit(){

	// ----------------------------------------
	// バージョン定義
	// ----------------------------------------

	// バージョン情報
	ver1 = VER1;
	ver2 = VER2;
	ver3 = VER3;
	ver4 = VER4;
	ver5 = VER5;

	// バージョン情報
	log_ver1 = MJSLOG_VER1;
	log_ver2 = MJSLOG_VER2;
	log_ver3 = MJSLOG_VER3;
	log_ver4 = MJSLOG_VER4;

	// ----------------------------------------
	// DXライブラリ初期化
	// ----------------------------------------

	// 画像表示クラス初期化(DXライブラリ初期化)
	dsp.DisplayInit();

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// GUIクラスの初期化
	gui.GuiInit();

	// 卓情報クラスの初期化
	tk.TkinfoInit();

	// ----------------------------------------
	// FPS処理初期化
	// ----------------------------------------
	FpsParamInit();

	// ----------------------------------------
	// ゲームモード設定
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;    // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// 終了処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// GUIクラスの終了処理
	gui.GuiPost();

	// 卓情報クラスの終了処理
	tk.TkinfoPost();

	// ----------------------------------------
	// DXライブラリ初期化
	// ----------------------------------------

	// 画像表示クラス終了処理(DXライブラリ終了処理)
	dsp.DisplayPost();

}

/* ---------------------------------------------------------------------------------------------- */
// ゲーム処理再開のため関連クラス初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainTakuInit(){

	// ----------------------------------------
	// 卓モードクラスの初期化(卓ステータス初期化)
	// ----------------------------------------

	// プレーヤークラスのインスタンス作成
	ply = new MJSPlayer[PLAYER_MAX];

	// 卓情報クラス・卓モード初期化
	tk.TakuInit();

	// GUIクラス・卓モード初期化
	gui.guiTakuInit();

	// ----------------------------------------
	// ログ開始処理
	// ----------------------------------------

	// ログファイル名
	char logname[50];

	// ログファイル名設定
	wsprintf(logname, "mjslog.log");

	// ログファイル初期化
	if ( gui.tklog_output_flg == true ){
		log.tklog_init(logname);
	}

}

/* ---------------------------------------------------------------------------------------------- */
// ゲーム処理再開のため関連クラス終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainTakuPost(){

	// ----------------------------------------
	// クラス終了処理
	// ----------------------------------------

	// 局構造体の解放
	delete[] ply;

	// 局クラスの終了処理
	tk.TakuPost();

	// GUIクラス・卓モード終了
	gui.guiTakuPost();

	// ----------------------------------------
	// ログ終了処理
	// ----------------------------------------

	// ファイル出力終了
	if ( gui.tklog_output_flg == true ){
		log.tklog_post();
	}
}

/* ---------------------------------------------------------------------------------------------- */
// メイン処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainExe(){

	// ----------------------------------------
	// メイン処理
	// ----------------------------------------

	// 終了処理がされるまで、ループ処理
	while( ProcessMessage() == 0 && CheckHitKey(KEY_INPUT_ESCAPE) == 0 ){

		// checkpoint_time更新、平均Fps算出
		FpsUpdate();

		// メイン処理
		MainExe_ChkStat();

		// ウエイト処理
		FpsWait();

	}

}

/* ---------------------------------------------------------------------------------------------- */
// Fps算出処理・初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::FpsParamInit(){

	// 変数初期化
	ave_fps           = 0;    // ave_fps初期化
	frame_count       = 0;    // frame_count初期化
	total_frame_count = 0;    // total_frame_count初期化

	// 最初フレームの「定点時刻(checkpoint_time)」定義
	checkpoint_time = GetNowCount();

}

/* ---------------------------------------------------------------------------------------------- */
// Fps算出処理・更新処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::FpsUpdate(){

	// 変数定義
	int tmp_now_time;    // 現在時刻

	// サンプルフレーム数に達した場合の内部処理
	// 「定点時刻(checkpoint_time)」の更新、「平均ave_fps」算出
	if( frame_count == SAMPLE_FRAME_COUNT ){ 

		// 現在の時間の取得
		tmp_now_time = GetNowCount();

		// 「平均ave_fps」算出処理
		ave_fps = (float)SAMPLE_FRAME_COUNT*1000.f / (tmp_now_time - checkpoint_time);

		// 「フレームのカウンタ数」の初期化
		frame_count = 0;

		// SAMPLE_FRAME_COUNTごとに「定点時刻」を更新
		checkpoint_time = tmp_now_time;

	}

	// 「フレームのカウンタ数」の加算
	frame_count++;

	// 「合計フレームのカウンタ数」の加算
	total_frame_count++;

}

/* ---------------------------------------------------------------------------------------------- */
// Fps算出処理・ウエイト処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::FpsWait(){

	// 現在時刻と「定点時刻(checkpoint_time)」との差分時間を算出
	// それから待ち時間(wait_time)を算出
	wait_time = ( frame_count*1000 / FPS ) - (GetNowCount() - checkpoint_time); // frame_countからの理論時刻と実機からの現在時間との差分を算出する

	// ウエイト処理
	if( wait_time > 0 ){
		Sleep(wait_time);     // wait_timeの時間(ミリ秒)だけ待機を行う
	}

}

/* ---------------------------------------------------------------------------------------------- */
// ゲーム状態ごとに処理分岐
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MainExe_ChkStat(){

	/*-----------------------------------------------------------*/
	// 処理分岐
	/*-----------------------------------------------------------*/
	switch(gui.gui_main_stat){

		// オープニング初期化
		case GUI_OPENING_INIT:
			OpeningInit();
		break;

		// オープニング処理
		case GUI_OPENING:
			OpeningExe();
		break;

		// オープニング終了
		case GUI_OPENING_POST:
			OpeningPost();
		break;

		// ゲームプレイ初期化
		case GUI_PLAYING_INIT:
			PlayingInit();
		break;

		// プレイ処理
		case GUI_PLAYING:
			PlayingExe();
		break;

		// プレイ終了
		case GUI_PLAYING_POST:
			PlayingPost();
		break;

		// ビューアー初期化
		case GUI_VIEWING_INIT:
			ViewingInit();
		break;

		// ビューアー実行
		case GUI_VIEWING:
			ViewingExe();
		break;

		// ビューアー終了
		case GUI_VIEWING_POST:
			ViewingPost();
		break;

		// 検証モード初期化
		case GUI_RUNNING_INIT:
			RunningInit();
		break;

		// 検証モード処理
		case GUI_RUNNING:
			RunningExec();
		break;

		// 検証モード終了
		case GUI_RUNNING_POST:
			RunningPost();
		break;

		// クライアントモード初期化
		case GUI_CLIENT_INIT:
			ClientInit();
		break;

		// クライアントモード処理
		case GUI_CLIENT:
			ClientExec();
		break;

		// クライアントモード終了
		case GUI_CLIENT_POST:
			ClientPost();
		break;

		// MJAIserverモード初期化
		case GUI_MJAISERVER_INIT:
			MJServerInit();
		break;

		// MJAIserverモード処理
		case GUI_MJAISERVER:
			MJServerExe();
		break;

		// MJAIserverモード終了
		case GUI_MJAISERVER_POST:
			MJServerPost();
		break;

		// 設定画面初期化
		case GUI_SETTING_INIT:
			SettingInit();
		break;

		// 設定画面処理
		case GUI_SETTING:
			SettingExe();
		break;

		// 設定画面終了
		case GUI_SETTING_POST:
			SettingPost();
		break;

	}

}

/* ---------------------------------------------------------------------------------------------- */
// オープニング初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::OpeningInit(){

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING;

}

/* ---------------------------------------------------------------------------------------------- */
// オープニング終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::OpeningPost(){

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = gui.gui_next_stat;

}

/* ---------------------------------------------------------------------------------------------- */
// オープニング処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::OpeningExe(){

	// マウス情報取り込み
	gui.chk_opening(&tk);

	// 表示処理
	dsp.DisplayOpening(&gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

}

/* ---------------------------------------------------------------------------------------------- */
// ゲームモード初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::PlayingInit(){

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// 卓ステータスの初期化
	MainTakuInit();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;   // 牌譜読取は実行しない

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_PLAYING;    // 卓ゲームプレイモード

}

/* ---------------------------------------------------------------------------------------------- */
// ゲームモード終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::PlayingPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// 卓ステータスの終了
	MainTakuPost();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;   // 牌譜読取は実行しない

	// 変数初期化(その他クラス変数)
	gui.gui_taku_mode = COMMON_NO_MODE;    // 終了ボタン初期化

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;    // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// ゲームモード実行
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::PlayingExe(){

	// マウス情報取り込み→「クリックフラグ」の有無を優先的に確認
	gui.guiTaku(&tk);

	// 卓クラス計算処理
	taku.CheckTakuStatus(&tk, ply, gui.act_push_flg);

	// 卓クラス計算処理の直後は、マウス押下フラグの無効化
	gui.act_push_flg = false;

	// 表示処理
	dsp.DisplayTaku(&tk, ply, &gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

	// ログ出力
	if ( tk.stat == TAKUEND && gui.tklog_output_flg == true ){
		log.tklog_print(&tk, log_ver1, log_ver2, log_ver3, log_ver4);
		gui.tklog_output_flg = false;
	}

	// ----------------------------------------
	// 卓終了ならオープニング画面
	// ----------------------------------------
	if (tk.stat == TAKUEND || gui.gui_taku_mode == COMMON_END_MODE){

		// ----------------------------------------
		// ゲームモードの変更
		// ----------------------------------------
		gui.gui_main_stat = GUI_PLAYING_POST;    // 卓ゲームプレイモード後処理

	}

}

/* ---------------------------------------------------------------------------------------------- */
// ビューワー(牌譜表示)モードの初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ViewingInit(){

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// 卓ステータスの初期化
	MainTakuInit();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = true;     // 牌譜読み取りモード

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_VIEWING;    // ビューワーモード

}

/* ---------------------------------------------------------------------------------------------- */
// ビューワー(牌譜表示)モードの終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ViewingPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// 卓ステータスの終了
	MainTakuPost();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(ゲームクラス)
	haifu_read_mode  = false;    // 牌譜読み取りモード

	// 変数初期化
	gui.gui_taku_mode = COMMON_NO_MODE;    // 終了ボタン初期化

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;    // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// ビューワー(牌譜表示)モード
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ViewingExe(){

	// TKINFOクラス、GUIクラスの初期化
	if (haifu_read_mode == true){

		// 東風荘ログ(mjscore.txt)解析
		if(gui.gui_logtype == GUI_LOG_MJSCORE){

			// 東風荘ログ(mjscore.txt)解析
			tp.TpreadInit(&gui);
			tp.TpreadExec(&tk);
			tp.TpreadPost();

		// MJAIログ解析
		}else if(gui.gui_logtype == GUI_LOG_MJAILOG){

			// MJAIログ解析
			mjai.read_logfile_init(&gui);
			mjai.read_logfile_exec(&tk, &gui);
			mjai.read_logfile_post();

		// 例外処理
		}else{

		}

		// ビューワーモードの初期化
		gui.guiViewerInitTaku(&tk);

		// ログ出力
		if ( gui.tklog_output_flg == true ){
			log.tklog_print(&tk, log_ver1, log_ver2, log_ver3, log_ver4);
			gui.tklog_output_flg = false;
		}

		// 牌譜ログ読み込み無効化
		haifu_read_mode = false;

	}

	// 表示処理
	dsp.DisplayViewerTaku(&tk, ply, &gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

	// マウス情報取り込み
	gui.guiViewerTaku(&tk);

	// ----------------------------------------
	// ビューアーモード終了ならオープニング画面
	// ----------------------------------------
	if (tk.stat == TAKUEND || gui.gui_taku_mode == COMMON_END_MODE){

		// ----------------------------------------
		// ゲームモードの変更
		// ----------------------------------------
		gui.gui_main_stat = GUI_VIEWING_POST;    // ビューワーモード後処理

	}

}

/* ---------------------------------------------------------------------------------------------- */
// 検証モード初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::RunningInit(){

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// 卓ステータスの初期化
	MainTakuInit();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;   // 牌譜読取は実行しない

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_RUNNING;    // 検証モード

}

/* ---------------------------------------------------------------------------------------------- */
// 検証モード終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::RunningPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// 卓ステータスの終了
	MainTakuPost();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;         // 牌譜読取は実行しない

	// 変数初期化(その他クラス変数)
	gui.gui_taku_mode = COMMON_NO_MODE;    // 終了ボタン初期化

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;    // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// 検証モード実行
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::RunningExec(){

	// GUIクラス処理
	gui.guiRunningMain(&tk);

	// 卓クラス処理
	taku.CheckTakuStatus(&tk, ply, gui.act_push_flg);

	// マウス押下フラグの無効化
	gui.act_push_flg = false;

	// 表示クラス処理
	dsp.DisplayTaku(&tk, ply, &gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

	// ログ出力
	if ( tk.stat == TAKUEND && gui.tklog_output_flg == true ){
		log.tklog_print(&tk, log_ver1, log_ver2, log_ver3, log_ver4);
		gui.tklog_output_flg = false;
	}

	// ----------------------------------------
	// 卓終了ならオープニング画面
	// ----------------------------------------
	if (tk.stat == TAKUEND || gui.gui_taku_mode == COMMON_END_MODE){

		// ----------------------------------------
		// ゲームモードの変更
		// ----------------------------------------
		gui.gui_main_stat = GUI_RUNNING_POST;    // 検証モード・後処理

	}
}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiクライアントモード初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ClientInit(){

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// 卓ステータスの初期化
	MainTakuInit();

	// クライアントクラス初期化
	cli.ClientInit(&tk, &gui, &mjai);

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;                 // 牌譜読取は実行しない

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_CLIENT;    // クライアントモード

}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiクライアントモード終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ClientPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// 卓ステータスの終了
	MainTakuPost();

	// クライアントクラス終了
	cli.ClientPost(&gui);

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(Gameクラス・ログ読み有無)
	haifu_read_mode  = false;   // 牌譜読取は実行しない

	// 変数初期化(その他クラス変数)
	gui.gui_taku_mode = COMMON_NO_MODE;    // 終了ボタン初期化

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;    // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiクライアントモード実行
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::ClientExec(){

	// マウス情報取り込み→「クリックフラグ」の有無を優先的に確認
	gui.guiClientMain(&tk);

	// クライアント処理実行
	cli.CheckTakuStatus(&tk, ply, &gui, gui.act_push_flg);

	// 卓クラス計算処理の直後は、マウス押下フラグの無効化
	gui.act_push_flg = false;

	// 表示処理
	dsp.DisplayMjaiClientTaku(&tk, ply, &gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

	// ログ出力
/*	if ( gui.tklog_output_flg == true ){
		log.tklog_print(&tk, log_ver1, log_ver2, log_ver3, log_ver4);
		gui.tklog_output_flg = false;
	}*/

	// ----------------------------------------
	// 卓終了ならオープニング画面
	// ----------------------------------------
	// if (tk.stat == TAKUEND || gui.gui_taku_mode == COMMON_END_MODE || gui.cli_mode == GUI_MJAI_END_MODE){
	if ( gui.cli_mode == GUI_MJAI_END_MODE){

		// ----------------------------------------
		// ゲームモードの変更
		// ----------------------------------------
		gui.gui_main_stat = GUI_CLIENT_POST;    // クライアントモード後処理

	}

}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiサーバモード初期化
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MJServerInit(){

	// ----------------------------------------
	// クラス開始処理
	// ----------------------------------------
	// srv.SockSrvInit();

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_MJAISERVER;    // MJAIサーバモード後処理

}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiサーバモード終了
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MJServerPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------
	// サーバクラス終了

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------

}

/* ---------------------------------------------------------------------------------------------- */
// Mjaiサーバモード処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::MJServerExe(){

	// Socketサーバ処理の実行
	// srv.SockSrvMain(&gui);

	// マウス情報取り込み
	// gui.chk_opening();

	// 表示処理
	// dsp.DisplaySocketServer(&tk, &gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

}

/* ---------------------------------------------------------------------------------------------- */
// 設定画面：開始処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::SettingInit(){

	// ----------------------------------------
	// クラス初期化
	// ----------------------------------------

	// 卓ステータスの初期化
	MainTakuInit();
	gui.guiSettingInit();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_SETTING;    // クライアントモード


}

/* ---------------------------------------------------------------------------------------------- */
// 設定画面：終了処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::SettingPost(){

	// ----------------------------------------
	// クラス終了
	// ----------------------------------------

	// 卓ステータスの終了
	MainTakuPost();

	// ----------------------------------------
	// 変数定義
	// ----------------------------------------

	// 変数初期化(その他クラス変数)
	gui.gui_taku_mode = COMMON_NO_MODE;           // 終了ボタン初期化

	// ----------------------------------------
	// ゲームモードの変更
	// ----------------------------------------
	gui.gui_main_stat = GUI_OPENING_INIT;         // オープニング前処理

}

/* ---------------------------------------------------------------------------------------------- */
// 設定画面：実行処理
/* ---------------------------------------------------------------------------------------------- */
void MJSMain::SettingExe(){

	// GUI処理
	gui.guiSetting();

	// 表示処理
	dsp.DisplaySetting(&gui, ave_fps, total_frame_count, ver1, ver2, ver3, ver4, ver5);

}

/* ---------------------------------------------------------------------------------------------- */
// ソース終了
/* ---------------------------------------------------------------------------------------------- */
