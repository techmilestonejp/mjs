
-----------------------------------------------------
 * プログラム概要 ： さくら麻雀(Ver0.1.2.1：開発版)
 * バージョン     ： 0.1.2.1.234(表示牌(open_haiparts)一覧表示)
 * 最終更新日     ： 2025/02/01 09:57:37
 * 
 * Copyright (c) 2010-2025 TechMileStoraJP, All rights reserved.
 * 
-----------------------------------------------------
■履歴情報
-----------------------------------------------------
20250201_01_v0121_234コミット
* 表示牌(open_haiparts)一覧表示
* source_treeのSJIS設定の有効化
-----------------------------------------------------
20220907_01_v001a_06_01コミット
* 東風荘ログ読み込み処理Fix版
-----------------------------------------------------
20221001_01_v001_01_01コミット
* 天鳳ログ読み取りツール・初回コミット
-----------------------------------------------------

■牌理
https://tenhou.net/2/?p=12234566677890s
1223456667789s 0s

https://tenhou.net/2/?p=22335666789990s
2233566678999s 0s

https://tenhou.net/2/?p=13578m369p36s557z0s
13578m369p36s557z0s

-----------------------------------------------------

■目標
* ★とくかく動く麻雀ゲームを作る
→「Newさくら麻雀(v0.1.2)」の作成に全力をかける
→完成のめどが見えてきたので、ver0.1.3.0の制作に取り掛かる。

■次の目標
* ver0.1.3.0.0(ver0.2.0.0.0)の正式版を作成する
→MJAI牌譜ログ読込みツールを作成する

-----------------------------------------------------

■今後実施すべき内容
<卓表示の改良>
→表示方法を「端基準」に変更する
→pre0.1.3版として実装する

<2025/01/04時点で修正すべき不具合>
* 「七対子和了」の得点計算が実装されていない
* MJAI修正：和了結果表示で、黒牌の和了牌が赤牌で選択される場合がある
* 赤５を切るときにおかしい
* (mjaiの不具合)カカンは「捨牌ドラ表示」だが、「自摸ドラ表示」となっている。

<mjsplayerクラス修正箇所>
①(済)plyクラスに処理時間測定関数を実装
②シャンテン計算の改良
③期待値実装(テンパイ、１向聴、２向聴)→mjsサンプルで作成する
④関数の統一化
⑤plyクラスの和了表示タイミングを変更する

<plyクラス強化>
<mjsplayer実装予定>
①(優先度高)mjsplayerで、リーチ時に相手プレーヤ捨牌の確認処理実装する
②既に表示されたとして牌をカウントする
③mjsplayerで、「ドラ距離」を実装する
④mjsplayerで、期待値実装
⑤２シャンテン以下の戦略実装(ドラ、タンヤオ、ホンイツ清一色、イッツー、三色)
⑥mjs.exeにバックポート

<mjsplayer強化にあたり>
* 期待値実装(テンパイ、１向聴、２向聴)
* オリ処理の厳密化→「手牌期待値」で「ツッパリ」の実装
* ドラ距離実装
* ドラ受入、ホンイツを含めた役狙い戦略の強化
* ply関数のバックポート
* 関数名の統一化

<戦略関数(2シャンまで)>
* ドラ活用の有無
* 喰いタンの有無
* ホンイツ、清一色
* イッツー狙い
* 三色狙い
* チャンタ狙い
* 役満狙い

・<設定画面>
iniファイルの導入

・<関数共通化>
* GUI関数
*(済)和了表示
*(済)Disp関数

・<卓プレイモード>
* 裏ドラ、カンドラ実装
* 鳴きの場合に、天和地和の無効化
* (2024/11/04実装) 鳴きの場合に、リーチ一発の無効化
* 「スクエア表示」で、UPが一段下にずれてる
* 「スクエア表示」でカカンがおかしい
* チー選択処理
* 「全鳴きモード」での正常処理確認
→チー、ポン、ミンカンの赤牌処理で不具合が内在している
* (実装途中)色の役割
    * 無色(0)→通常
    * 灰色(1)→鳴かれ牌
    * 青色(2)→確認牌
    * 黄色(3)→ドラ
    * 緑色(4)→自摸切牌
    * 桃色(5)→強調牌

・<クライアントモード>
* チー選択処理
* 「全鳴きモード」での正常処理確認
→デバグを十分に行う
* GUI関数共通化検討2回目

・<MJSサーバ制作>
* (済)mjsサーバ作成
* クライアントから接続の切断処理確認の実装

・<処理系>
* (済)plyクラスの命名規則の統一
* takuクラスの関数細分化
* 役計算クラスの最新化
* 東風荘ログ・ドラ表示

・<正式0.1.3.0版(ver0.2.0.0.0)の実装内容>
* (済)デバグ版とリリース版を作成する
* DLL実装

・<操作系>
* (済)プレーヤーGUI操作実装
* 卓情報内のリアルタイム得点表示

・<関数系>
* wk構造体のnew実装

-----------------------------------------------------
■関数共通化
<モード違いの区別する変数>

<GUI関数>
* guiSetPlyNormalActMain
    * guiSetPlyNormalAct
    * guiSetPlyRiichiSutehaiAct
    * guiSetPlyRiichiYukoAct
    * guiSetPlyAnkanKakanAct
* guiSetPlyNakiActMain
    * guiSetPlyNakiAct
    * guiSetPlyChiPaiAct
    * guiSetPlyChiPaiAct2
* guiSetPlyNakiSuteAct

<Disp関数>


<和了表示>

-----------------------------------------------------

■実装済
・<mjaiログ表示>
* (2024/11/24実装)MJAIログ表示：七対子形式の和了が表示されない
* (2024/11/16実装)東風荘のログが表示できない
→頭ハネ想定で、disp_num=0とする
* (2024/11/16実装)MJAI修正：ダブロンが表示できない
→(済)ダブロン用整理番号「disp_num」を導入
* (2024/11/02実装)MJAIログ表示：鳴き時の「一発消し」が実装されていない
* (2024/11/02実装)濃い青牌がひっくり返らない
* (2024/11/02実装)LEFT-DOWN-UPのカカン表示がおかしい
* (2024/11/02実装)捨牌の四段目表示がおかしい
* (2024/11/01実装)食い下がりがない(鳴き三色同順が2翻になっている)
* (2024/11/01実装)ピンツモが22符になっている
* (2024/11/01実装)「リンシャン自摸切り」の表示がおかしくなる→ドラ表示でActidを設定しない
* (2024/10/30実装)和了表示：カンドラ表示
* (2024/10/30実装)和了表示：ドラがカウントされない
* (2024/10/28実装)disp_partsにX_STAT, Y_STATは利用しない(x, yに変更する)
* (2024/10/28実装)和了表示：南場の南が役牌にならない
* (2024/10/27実装)和了表示：裏ドラ表示
* (2024/10/27実装)和了表示：ピンヅモで自摸符の2符が付く
* (2024/10/21実装)mjai読み込み処理実装：ミンカン、流局アクション、自摸和了、ロン和了
* (2024/10/20実装)「tkinfo算出処理」に不具合がある→mjaiログ処理で、和了牌を指定していなかった
* (2024/10/19実装)場決め、卓結果表示
* (2024/10/19実装)DOWNの対象プレーヤの表示変更処理
* (2024/10/19実装)鳴き捨て表示がおかしい(自摸牌表示される)→mjscoreで「鳴捨処理」を実装していない

・<設定画面>
・(2024/10/14)対象の牌譜ログのデフォルト取得を行う
・(2024/10/14)設定画面で対象の牌譜ログの格納パスを表示する
・(2024/10/14)「ファイル取得ダイアグ」でファイル名を取得する

・<画面表示>
* 牌譜モードでのスクエア表示
* リーチした時に下にはみ出てる
* スクエアのHUMプレイ実装
* スクエア表示での「リーチ捨牌」実装
* 晒し牌の完全実装
* 囲み表示(スクエア表示)を行う
    * スクエア捨牌
    * スクエア手牌
    * スクエア晒し牌
* 24x36牌サイズとする

・<pre0.1.3.1版の実装内容>
* ベースプログラムの作成
* DXライブラリの標準フォーマットを作成する
* Dispパーツクラスを作成する

・<MJSサーバ制作>
* サンプルプロジェクトの作成
→デバグ版とリリース版を作成する
* DXライブラリ最新版配置

・<クライアントモード：不具合、プログラムミス>
* (2024/4/28)リーチ時の捨牌を鳴いた場合にエラー
→そもそも「リーチアクセプト」を完全実装する。
* (2024/4/28)裏向き牌のランダム捨牌処理
* (2024/4/28)囲みモードでHUMの捨牌処理ができない(X_HAI_SIZEが残っている)
* (2024/4/28)クライアントモードで流局時に画面落ちする

・<クライアントモード>
* (2024/5/25修正：チー処理でバグも修正) ply関数の実装
* (2024/5/25済)「鳴きなし」モード実装
* COM鳴き処理(鳴き捨て時)
→tk情報クラスの「最ぼ牌」の枚数計算で実装
* 鳴き捨時に鳴き処理でエラーになることの解消
→そもそも「リーチアクセプト」を完全実装する。
* 喰い換え不可(捨牌禁止)の表示
* リーチ直後に1000点減らない
→そもそも「リーチアクセプト」を完全実装する。
* カカン処理
* ミンカン処理
* actモードと鳴きモードの分離
* 和了結果で手牌に鳴き牌がない
* 卓ゲーム終了時表示
* 役名の漢字表示
* 次局処理の実装
→得点表示が変
* 流局処理
→荒牌時の得点設定
* COMアンカンで牌が減らない
* リーチ処理
    * リーチ後「自摸捨て」しかできない
    * リーチ後「オート自摸」
* 「cannot_dahai」の実装
* アンカン実装
* ドラ表示
* ply_actの表示
* SENDメッセージ処理は集約する
* 時刻表示の0埋め
* pon.chiリクエストの送信メッセージ処理
* pon,chiメッセージ受信時の処理
→実装済
→鳴きリクエスト送信の繰り返しテスト実施
* 「赤ポン」がうまく行かない
→修正済PLAYER_MAXが定義されていた

・<卓プレイモード>
* (2024/8/17)赤牌ロン(和了)で赤牌が役に反映しない
* メインステータスをguiクラスに移動(2024/5/19済み)
* OldScoreクラスの廃止(2024/5/19済み)
* 「リーチ時捨牌禁止牌」と「喰い換え不可」の表示
* 手牌Dispの親関数の整理(捨牌、自摸捨て、リーチ時点)
→マウス操作の場合はtehai_x変数を利用する
* ply情報モードでの手牌表示修正
* 通常モードの和了結果の手牌表示を最新化(赤牌が表示されない)
* gameクラス最新化
* kyoku_indexの共通化

* ミンカン処理
* チー選択状態で、「自摸牌」が表示される
* HUMプレーヤの場合に、2枚なのに1枚目が切られる
* 1巡目であがると、鳴いてもＷリーチとなる。
* 20230506：鳴き後の手牌テーブルに正しい値(プレーヤ３の値)が投入されていない
→手牌テーブルにプレーヤ３の情報を投入する。

・<処理系>
* tkinfoの手牌テーブル処理の最新化
* tkクラスの待牌実証、シャンテン計算実証
* 符計算
* plyクラスのカカンが表示されない→カカンアクション実装中
*「次へ」ボタンの実装
* ボタンをゲームモードとビューアーモードで変える
* 赤牌実装
* カカン実装
* [バグ]リーチ後にplyクラスで待ちが変わる→リーチ後は完全に自摸切りのみ
* wk構造体のmalloc定義
* mjscore読み込みクラスの定義→「MJSTpread」(tpread.cpp)クラスの作成

-----------------------------------------------------

■麻雀AIプログラムを作成していて疑問に思ったこと
・カカンしてアンカンしたら、ドラはどうめくるのか？
・クライアントの要求で「赤5mでカカンする！」という要求があったが、
実は「5mの赤は持っておらず、黒しか5mを持ってなかった」
という場合の誤鳴きペナルティをどうするのか？という点
→MJAIは即落ちする

-----------------------------------------------------

■手牌解析が順番が難しい

・自摸時点（自摸あり）
①自摸定義
②ヒストグラム定義
③赤牌定義
④テーブル定義
⑤自摸有時点のシャンテン
⑥捨牌ごとのシャンテン

※ポン・チー直後が類似処理

・捨牌時点（自摸なし）
①自摸定義
②捨牌定義
②ヒストグラム定義
③赤牌ヒストグラム定義
④テーブル定義
⑤自摸無し時点のシャンテン
⑥待牌の算出

①SetHistPai
②SetHistAka
③Settable
④-1SetShnaten(tsumoari)
・自摸ありシャンテン
・自摸切りシャンテン
・テーブル牌ごとのシャンテン
④-2SetShnaten(tsumonashi)
・自摸捨て後のシャンテン
・待牌算出

-----------------------------------------------------

■plyクラス・鳴き処理変数

	int naki_count;                // 鳴いた合計面子数
	int ankan_count;               // 暗槓合計面子数
	int kakan_count;               // 加槓合計面子数

	LBMen naki_stat[MEN_MAX];      // 鳴き形式
	int   naki_hai[MEN_MAX];       // 鳴き牌
	int   naki_idx[MEN_MAX];       // 鳴き時の頭牌
	int   naki_aka[MEN_MAX];       // 赤牌の合計数

-----------------------------------------------------

■tkinfoクラス・鳴き処理変数

	int   naki_count[PLAYER_MAX];                 // 鳴いた合計面子数
	int   ankan_count[PLAYER_MAX];                // アンカン合計面子数
	int   kakan_count[PLAYER_MAX];                // カカン合計面子数

	int   naki_actid[PLAYER_MAX][MEN_MAX];        // 鳴いた時アクション番号(actid)
	LBMen naki_stat[PLAYER_MAX][MEN_MAX];         // 鳴き形式
	int   naki_hai[PLAYER_MAX][MEN_MAX];          // 鳴き牌
	int   naki_mode[PLAYER_MAX][MEN_MAX];         // 鳴き牌の牌種別モード(牌4種の区別：4×4×4=64)
	int   naki_idx[PLAYER_MAX][MEN_MAX];          // 鳴き時の頭牌
	int   naki_aka[PLAYER_MAX][MEN_MAX];          // 赤牌の合計数

	int   naki_mj_idx[PLAYER_MAX][MEN_MAX];       // mjscore牌譜用の鳴きインデックス(作業用)

-----------------------------------------------------

■tkinfoクラス・和了面子

	// 和了面子情報
	LBMen agari_men_stat[MEN_MAX];          // 和了面子形式
	int   agari_men_hai[MEN_MAX];           // 和了面子の頭牌
	int   agari_men_aka[MEN_MAX];           // 和了面子の赤牌の合計数
	int   agari_men_fu[MEN_MAX];            // 和了面子の符
	int   agari_men_zi19[MEN_MAX];          // 和了面子のヤオチュウ有無(0:中張 1:ヤオチュウ 2:役牌)

	int   agari_men_num_agari_hai;          // 和了牌を含む面子の面子番号

-----------------------------------------------------

■plyクラス・思考関連の処理内容

	// 頭ごとに分析
	void SetAtaBunseki(MJSTkinfo *tk);
	void CheckAtaHai(MJSTkinfo *tk);
	void CheckNormalMentsu(MJSTkinfo *tk, int ata, int Hai[]);        // 面子分析
	void SetRankHai(MJSTkinfo *tk, int ata);                          // ランク設定
	void SetGroupRank(MJSTkinfo *tk, int ata, int ip[], int ipsum);
	void CheckAtaYukoHai(MJSTkinfo *tk, int ata);                     // 有効牌分析
	void SetAtaYusen(MJSTkinfo *tk);                                  // 頭の優先度確認
	void ChackKanAct(MJSTkinfo *tk);                                  // カンチェック

-----------------------------------------------------

■Display-guiクラス連携

・メイン関数
* メイン関数：DispTakuPlaying、GuiTakuPlaying

・共通関数
* ドラ表示
* mFPS

・卓ステータスごとの卓ゲーム時のDisp表示関数
* default、gui->taku_dsp_mode == 0：DispNormalTakuStat()   GuiNormalTakuStat();
* KYOKURESULT                     ：DispKyokuEnd()、       GuiKyokuEnd()
* TAKURESULT                      ：DispTakuEnd()、        GuiTakuEnd()

・メイン関数(ビューワーモード)
* メイン関数：DispViewerModeTaku()、GuiViewerModeTaku()

・卓ステータスごとの処理限定が必要

-----------------------------------------------------

■MJAIログの読み込み
* readmjai.cpp(本体：フレームなし)
* viewer.cpp       (MJSViewer)
 * corelog.cpp   (MJSCorelog)
 * readmjai.cpp  (MJSReadMJAI) ：MJAIログ読込みクラス
 * readtplog.cpp (MJSReadTplog)：東風荘ログ読込みクラス
 * readthlog.cpp (MJSReadThlog)：天鳳ログ読込みクラス

-----------------------------------------------------

■クライアントモード・鳴き処理まで

<送信時>
①possメッセージを受け取り、鳴き可能アクションを設定する
②プレート押下時の処理実装
②-1 鳴き処理に分岐あり
③プレートが押された場合の処理実装(GUIクラス)
④クライアントクラスで鳴き処理を有効化
⑤SNDメッセージに鳴きアクションを定義

<受信時>
①鳴きアクションのメッセージ受信
②ログ内で正常処理されたかの確認

-----------------------------------------------------

■GUIモード一覧

・①ゲームステータス
LBGuiGmSt　　game_stat, next_stat
Gameクラスで処理するためGameクラスのステータス管理

・②オープニングGUIモード：
LBGuiOpMode　　gui_opening_mode
オープニング時点で選択したゲームモードの選択

・③卓GUIモード
LBGuiTakuMode　　gui_taku_mode
通常の卓表示で表示モードを管理する

・④手牌GUIモード
LBGuiTehaiMode　　gui_ply_tehai_mode
通常の卓表示で手牌のモードを管理する

・⑤GUIクライアント・ステータスモード
LBGuiMjaiClientMode　　cli_mode
クライアントモードのステータスを管理する

-----------------------------------------------------

■リーチフラグ

	// 天和有無
	bool tenho_chiho_flg[PLAYER_MAX];             // 天和・地和有無
	bool renho_flg[PLAYER_MAX];                   // 人和有無

	// リーチ有無
	bool riichi_flg[PLAYER_MAX];                  // リーチ有無
	bool riichi_ippatsu_flg[PLAYER_MAX];          // リーチ一発有無
	bool double_riichi_flg[PLAYER_MAX];           // ダブルリーチ有無

-----------------------------------------------------

